/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 *  
 * Important notes, labels cannot be long
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

&key_repeat { usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>; };

&sk { quick-release; };

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        // Play / Next / Prev button

        play_next_prev_td: play_next_prev_td {
            compatible = "zmk,behavior-tap-dance";
            label = "PLAY_NEXT_PREV_TD";
            #binding-cells = <0>;
            bindings = <&kp C_PP>, <&kp C_NEXT>, <&kp C_PREV>;
        };

        // Caps word and dt for CAPSLOCK 

        caps_word_tp: caps_word_tp {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_WORD_TP";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPSLOCK>;
        };

        /* Selection behaviours morphs
         *
         * This behaviours select text in a particular way.
         * They default to selecting to the right, but when shifted, they go to the left
         *
         * They depend on the 'selection' macros
         */

        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            label = "SELECT_WORD";
            bindings = <&select_word_right>, <&select_word_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        extend_word: extend_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_word_right>, <&extend_word_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        extend_line: extend_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_line_right>, <&extend_line_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        select_line: select_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_line_right>, <&select_line_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sk_mo: sk_mo {
            compatible = "zmk,behavior-hold-tap";
            label = "SK_MO";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        // 1t: selet all, 2t: cut all, 3t: copy all

        selec_all_copy_all_tp: selec_all_copy_all_tp {
            compatible = "zmk,behavior-tap-dance";
            label = "SELEC_ALL_COPY_ALL_TP";
            #binding-cells = <0>;
            bindings = <&kp LC(A)>, <&select_all_cut>, <&select_and_copy_all>;
        };

        // dt the ' to screenshot (convinient)
        // Hold like shift key, and tap to toggle it

        key_tog_hold: key_tog_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "KEY_TOG_HOLD";
            bindings = <&kp>, <&kt>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        // 1t: show screen, 2t: toggle camera

        mst_show_screen_vid_td: mst_show_screen_vid_td {
            compatible = "zmk,behavior-tap-dance";
            label = "Show screen and toggle video";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(E))>, <&kp LS(LC(O))>;
        };

        // 1t: go to call window, 2t: answer call from toast, 3t: Call someone from the chat

        mst_call_cmds_td: mst_call_cmds_td {
            compatible = "zmk,behavior-tap-dance";
            label = "MST_CALL_CMDS_TD";
            #binding-cells = <0>;
            bindings = <&mst_go_mst_meeting>, <&mst_join_call>, <&kp LA(LS(A))>;
        };

        layer_mo_tog: layer_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold for mo and tap tog";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        // 1t: reply to selcted message, 2t: reply to last message

        mst_reply_td: mst_reply_td {
            compatible = "zmk,behavior-tap-dance";
            label = "MST_REPLY_TD";
            #binding-cells = <0>;
            bindings = <&mst_reply_current_msg>, <&mst_reply_last_msg>;
        };

        // 1t: react happy to selcted message, 2t: react happy to last message

        mst_react_td: mst_react_td {
            compatible = "zmk,behavior-tap-dance";
            label = "MST_REACT_TD";
            #binding-cells = <0>;
            bindings = <&mst_react_happy>, <&mst_react_last_msg>;
        };

        /* 
        * Home row mods
        *
        * This mods allow you to put modifiers in the home row, and be comfortable. Inspiration from: https://github.com/urob/zmk-config
        *
        * 1. Do not allow same hand mods (avoids collitions from the same hand)
        * 2. Quick tapping for tap hold behavior
        * 3. Hold trigger on release allows you to write fast without activating false positives
        *
        * There is a left and right version of the behaviour. You must put them accordingly
        */

        hrm_left: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <55 56 57 72 73 74 40 58 28 16 6 7 8 9 18 19 20 21 30 31 32 33 42 43 44 45 60 61 62 63 76 77 78 79 5 6 17 18 29 30 41 42 59 60 75 76 52 53 54 70 71 69>;
            hold-trigger-on-release;
        };

        hrm_right: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 2 3 4 14 13 12 10 11 1 22 23 35 34 46 47 64 65 66 67 68 69 70 71 54 53 52 50 48 49 37 36 24 25 26 15 39 38 27 51 55 56 57 74 73 72>;
            hold-trigger-on-release;
        };

        // Similar to HRM but in thumbs for custom behaviour

        lt_thumbs_keys: lt_thumbs_keys {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_THUMBS_KEYS";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <300>;
            flavor = "tap-preferred";
        };

        paste_copy_cut_td: paste_copy_cut_td {
            compatible = "zmk,behavior-tap-dance";
            label = "PASTE_COPY_CUT_TD";
            #binding-cells = <0>;
            bindings = <&paste>, <&copy>, <&cut>;
        };

        lock_td: lock_td {
            compatible = "zmk,behavior-tap-dance";
            label = "LOCK_TD";
            #binding-cells = <0>;
            bindings = <&kp LG(L)>, <&kp LG(ESCAPE)>;
        };

        vim_norm_delete: vim_norm_delete {
            compatible = "zmk,behavior-tap-dance";
            label = "VIM_NORM_DELETE";
            #binding-cells = <0>;
            bindings = <&kp DELETE>, <&del_line>;
        };

        vim_norm_a: vim_norm_a {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_NORM_A";
            bindings = <&vim_kp_exit_norm RIGHT>, <&vim_kp_exit_norm END>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        vim_norm_i: vim_norm_i {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_NORM_I";
            bindings = <&tog 1>, <&vim_kp_exit_norm HOME>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        vim_norm_c: vim_norm_c {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_NORM_C";
            bindings = <&vim_norm_c_inner_word>, <&vim_c_del_line>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        vim_norm_v: vim_norm_v {
            compatible = "zmk,behavior-mod-morph";
            label = "VIM_NORM_V";
            bindings = <&vim_norm_v_kp>, <&vim_norm_V_kp>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        app_switcher_td: app_switcher_td {
            compatible = "zmk,behavior-tap-dance";
            label = "APP_SWITCHER_TD";
            #binding-cells = <0>;
            bindings = <&app_switcher>, <&app_switcher_killer>;
        };

        sk_shift_caps_word_td: sk_shift_caps_word_td {
            compatible = "zmk,behavior-tap-dance";
            label = "SK_SHIFT_CAPS_WORD_TD";
            #binding-cells = <0>;
            bindings = <&sk RIGHT_SHIFT>, <&caps_word>;
        };

        better_parentesis: better_parentesis {
            compatible = "zmk,behavior-mod-morph";
            label = "BETTER_PARENTESIS";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp RIGHT_PARENTHESIS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        better_sqr_bracket: better_sqr_bracket {
            compatible = "zmk,behavior-mod-morph";
            label = "BETTER_SQR_BRACKET";
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        better_braces: better_braces {
            compatible = "zmk,behavior-mod-morph";
            label = "BETTER_BRACES";
            bindings = <&kp LEFT_BRACE>, <&kp RIGHT_BRACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        better_anchor: better_anchor {
            compatible = "zmk,behavior-mod-morph";
            label = "BETTER_ANCHOR";
            bindings = <&kp LESS_THAN>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        better_slash: better_slash {
            compatible = "zmk,behavior-mod-morph";
            label = "BETTER_SLASH";
            bindings = <&kp SLASH>, <&kp NON_US_BACKSLASH>;

            #binding-cells = <0>;
            mods = <(MOD_LALT|MOD_RALT)>;
        };

        hmr_shift_left: hmr_shift_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_SHIFT_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <55 56 57 72 73 74 40 58 28 16 6 7 8 9 18 19 20 21 30 31 32 33 42 43 44 45 60 61 62 63 76 77 78 79 5 6 17 18 29 30 41 42 59 60 75 76 52 53 54 70 71 69>;
            hold-trigger-on-release;
        };

        hmr_shift_right: hmr_shift_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_SHIFT_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <55 56 57 72 73 74 52 53 54 70 71 69 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71>;
            hold-trigger-on-release;
        };

        mst_raise_hand_go_unmute: mst_raise_hand_go_unmute {
            compatible = "zmk,behavior-hold-tap";
            label = "MST_RAISE_HAND_GO_UNMUTE";
            bindings = <&go_call_unmute_mute_go_back>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <125>;
        };
    };

    macros {
        // Bluethoot profile macros, DO NOT TOUCH

        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        // Selection Macros

        select_none: select_none {
            label = "SN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
        };

        select_word_right: select_word_right {
            compatible = "zmk,behavior-macro";
            label = "SELECT_WORD_RIGHT";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
        };

        select_word_left: select_word_left {
            compatible = "zmk,behavior-macro";
            label = "SELECT_WORD_LEFT";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT_ARROW) &kp LC(RIGHT) &kp LC(LS(LEFT_ARROW))>;
        };

        extend_word_right: extend_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(RIGHT))>;
            label = "EXTEND_WORD_RIGHT";
        };

        extend_word_left: extend_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LEFT_ARROW))>;
            label = "EXTEND_WORD_LEFT";
        };

        select_line_right: select_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "SELECT_LINE_RIGHT";
        };

        select_line_left: select_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME)>;
            label = "SELECT_LINE_LEFT";
        };

        extend_line_left: extend_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(UP) &kp LS(HOME)>;
            label = "EXTEND_LINE_LEFT";
        };

        extend_line_right: extend_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOWN) &kp LS(END)>;
            label = "EXTEND_LINE_RIGHT";
        };

        // Text manipulation

        undo: undo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RC(Z)>;
            label = "UNDO";
        };

        redo: redo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Y)>;
            label = "REDO";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(X)>;
            label = "CUT";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>;
            label = "PASTE";
        };

        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>;
            label = "COPY";
        };

        my_email: my_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp D &kp Y &kp G &kp O &kp M &kp E &kp Z &kp G &kp G &kp N4 &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "MY_EMAIL";
        };

        win_desktop_right: win_right_desktop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LG(RIGHT))>;
            label = "WIN_RIGHT_DESKTOP";
        };

        win_desktop_left: win_desktop_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LG(LEFT))>;
            label = "WIN_DESKTOP_LEFT";
        };

        close_app: close_app {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(F4)>;
            label = "CLOSE_APP";
        };

        select_and_copy_all: select_and_copy_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp LC(C) &kp RIGHT>;
            label = "SELECT_AND_COPY_ALL";
        };

        select_all_cut: select_all_cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp LC(X) &kp RIGHT>;
            label = "SELECT_ALL_CUT";
        };

        // Microsoft Teams (mst) layer macros

        mst_available: mst_available {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(SLASH) &kp A &kp V &kp A &kp I &kp L &kp A &kp B &kp L>,
                <&macro_wait_time 200>,
                <&kp E &kp ENTER>;

            label = "mst_AVAILABLE";
        };

        mst_busy: mst_busy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(SLASH) &kp B &kp U &kp S>,
                <&macro_wait_time 200>,
                <&kp Y &kp ENTER>;

            label = "mst_BUSY";
        };

        mst_brb: mst_brb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(SLASH) &kp B &kp R>,
                <&macro_wait_time 200>,
                <&kp B &kp ENTER>;

            label = "mst_BRB";
        };

        mst_offline: mst_offline {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(SLASH) &kp O &kp F &kp F &kp L &kp I &kp N>,
                <&macro_wait_time 200>,
                <&kp E &kp ENTER>;

            label = "mst_OFFLINE";
        };

        mst_away: mst_away {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(SLASH) &kp A &kp W &kp A>,
                <&macro_wait_time 200>,
                <&kp Y &kp ENTER>;

            label = "mst_AWAY";
        };

        mst_go_mst_meeting: mst_go_call {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kt LEFT_WIN>,
                <&macro_wait_time 100>,
                <&kp N1 &kp NUMBER_1 &kt LEFT_WIN>;

            label = "MST_GO_CALL";
        };

        mst_reply_current_msg: mst_reply_current_msg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ENTER &kp TAB &kp ENTER &tog 6>;
            label = "MST_REPLY_CURRENT_MSG";
        };

        mst_react_happy: mst_react_happy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ENTER &kp ENTER &kp ESCAPE>;
            label = "MST_REACT_HAPPY";
        };

        mst_react_last_msg: mst_react_last_msg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(R)) &kp ENTER &kp ESCAPE>;
            label = "MST_REACT_LAST_MSG";
        };

        mst_key_exit_mst: mst_key_exit_mst {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &tog 6>;
            label = "MST_KEY_EXIT_MST";
        };

        mst_reply_last_msg: mst_reply_last_msg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 100>,
                <&kp LC(R) &kp LS(TAB)>,
                <&macro_wait_time 30>,
                <&kp ENTER &kp TAB &kp ENTER &tog 6>;

            label = "MST_REPLY_LAST_MSG";
        };

        vim_kp_exit_norm: vim_to_insert {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &tog 1>;
            label = "VIM_TO_INSERT";
        };

        vim_exit_visual_kp: vim_tog_visual {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kt LEFT_SHIFT &macro_param_1to1 &kp MACRO_PLACEHOLDER &tog 2 &kp RIGHT &kp LEFT_ARROW>;
            label = "VIM_TOG_VISUAL";
        };

        vim_norm_v_kp: vim_enter_visual {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&tog 2 &kt LEFT_SHIFT>;
            label = "VIM_ENTER_VISUAL";
        };

        mst_go_to_teams: mst_go_to_teams {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 100>,
                <&macro_press>,
                <&kp LEFT_WIN>,
                <&macro_tap>,
                <&kp NUMBER_1>,
                <&macro_release>,
                <&kp LEFT_WIN>;

            label = "MST_GO_TO_TEAMS";
        };

        two_kp: dt_kp {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &macro_param_2to1 &kp MACRO_PLACEHOLDER>;
            label = "DT_KP";
        };

        del_line: del_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END) &kp LC(X)>;
            label = "DEL_LINE";
        };

        copy_line: copy_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END) &kp LC(C) &kp END>;
            label = "COPY_LINE";
        };

        mo_w_glow: mo_w_glow {
            compatible = "zmk,behavior-macro-two-param";
            #binding-cells = <2>;
            bindings =
                <&macro_wait_time 50>,
                <&macro_tap_time 0>,
                <&macro_press>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&macro_param_2to2 &rgb_ug RGB_COLOR_HSB_CMD MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &mo MACRO_PLACEHOLDER>,
                <&macro_tap>,
                <&rgb_ug RGB_OFF>;

            label = "MO_W_GLOW";
        };

        vim_exit_visual_and_norm: vim_exit_visual_norm {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&kt LEFT_SHIFT &macro_param_1to1 &kp MACRO_PLACEHOLDER &tog 2 &tog 1 &kp RIGHT &kp LEFT_ARROW>;
            label = "VIM_EXIT_VISUAL_NORM";
        };

        vim_copy_kp: vim_copy_kp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(C) &kp ESCAPE>;
            label = "VIM_COPY_KP";
        };

        vim_o_kp: vim_o_kp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp ENTER &tog 1>;
            label = "VIM_O_KP";
        };

        vim_c_del_line: vim_c_del_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOWN) &kp LS(END) &kp DEL &tog 1>;
            label = "VIM_C_DEL_LINE";
        };

        vim_norm_c_inner_word: vim_norm_c_inner_word {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 100>,
                <&select_word_right &kp DELETE &tog 1>;

            label = "VIM_NORM_C_INNER_WORD";
        };

        vim_norm_V_kp: vim_V_kp {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&tog 2>,
                <&macro_wait_time 100>,
                <&kp HOME>,
                <&macro_wait_time 30>,
                <&kt LEFT_SHIFT &kp END>;

            label = "VIM_V_KP";
        };

        app_switcher: app_switcher {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "APP_SWITCHER";
        };

        mst_join_call: mst_join_call {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 2000>,
                <&kp LC(LS(J))>,
                <&macro_wait_time 200>,
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp TAB &kp TAB>,
                <&macro_release>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp ENTER>;

            label = "MST_JOIN_CALL";
        };

        app_switcher_killer: app_switcher_killer {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp TAB>,
                <&macro_pause_for_release>,
                <&macro_wait_time 100>,
                <&macro_release>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&close_app>;

            label = "APP_SWITCHER_KILLER";
        };

        vim_exit_visual: vim_exit_visual {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kt LEFT_SHIFT &tog 2>;
            label = "VIM_EXIT_VISUAL";
        };

        full_screen_window: full_screen_window {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 200>,
                <&macro_press>,
                <&kp LEFT_GUI>,
                <&macro_tap>,
                <&kp UP_ARROW &kp UP_ARROW &kp DOWN &kp UP_ARROW>,
                <&macro_release>,
                <&kp LEFT_GUI>;

            label = "FULL_SCREEN_WINDOW";
        };

        go_call_unmute_mute_go_back: go_call_unmute_mute_go_back {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&mst_go_mst_meeting>,
                <&macro_wait_time 30>,
                <&macro_press>,
                <&kp LC(SPACE)>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&kp LC(SPACE)>,
                <&macro_tap>,
                <&kp LA(TAB)>;

            label = "GO_CALL_UNMUTE_MUTE_GO_BACK";
        };
    };

    combos {
        // IMPORTANT NOTICE: This combos are based in QWERTY layout

        compatible = "zmk,combos";

        // w + l (vim like) to switch to workspace in the right

        combo_win_desktop_right {
            bindings = <&win_desktop_right>;
            key-positions = <43 24>;
            require-prior-idle-ms = <100>;
        };

        // w + h (vim like) to switch to workspace in the left

        combo_win_desktop_left {
            bindings = <&win_desktop_left>;
            key-positions = <40 24>;
            require-prior-idle-ms = <100>;
        };

        // WIN + Q becomes ALT + F4 (closes any app)

        combo_alt_close_app {
            bindings = <&close_app>;
            key-positions = <44 23>;
            require-prior-idle-ms = <200>;
        };

        /*
        *
        * MST (Microsoft Teams) combos 
        *
        * This combos are available in the teams layer
        * */
        // j + k for putting available status
        // l + k for putting available brb
        // u+i This toggles temas layer. Available in base layer and teams layer for easy transitioning

        combo_toggle_teams {
            bindings = <&tog 6>;
            key-positions = <29 30 31>;
            require-prior-idle-ms = <200>;
            layers = <0 6>;
        };

        enter_vim_mode {
            bindings = <&tog 1>;
            key-positions = <52 57>;
            layers = <0>;
        };

        gaming_mode {
            bindings = <&tog 10>;
            key-positions = <50 48 37 69>;
            layers = <0>;
            require-prior-idle-ms = <500>;
        };

        combo_copy {
            bindings = <&copy>;
            key-positions = <24 25>;
            require-prior-idle-ms = <100>;
            timeout-ms = <18>;
        };

        combo_paste {
            bindings = <&paste>;
            key-positions = <25 26>;
            require-prior-idle-ms = <200>;
            timeout-ms = <18>;
        };

        combo_cut {
            bindings = <&cut>;
            key-positions = <24 25 26>;
            require-prior-idle-ms = <200>;
        };

        combo_go_meeting {
            bindings = <&mst_go_mst_meeting>;
            key-positions = <42 43>;
            require-prior-idle-ms = <200>;
            layers = <6>;
        };

        combo_go_teams {
            bindings = <&mst_go_to_teams>;
            key-positions = <41 42>;
            require-prior-idle-ms = <200>;
            layers = <6>;
        };

        combo_parentesis {
            bindings = <&better_parentesis>;
            key-positions = <38 39>;
            layers = <0>;
            layers = <0 3>;
        };

        combo_sqr_brackets {
            bindings = <&better_sqr_bracket>;
            key-positions = <26 27>;
            layers = <0 3>;
        };

        combo_better_braces {
            bindings = <&better_braces>;
            key-positions = <14 15>;
            layers = <0 3>;
        };

        combo_anchor {
            bindings = <&better_anchor>;
            key-positions = <50 51>;
            layers = <0 3>;
        };

        combo_tilde {
            bindings = <&kp TILDE>;
            key-positions = <39 40>;
            layers = <0 7>;
        };

        combo_repeat_right {
            bindings = <&key_repeat>;
            key-positions = <30 41 43>;
        };

        combo_repeat_left {
            bindings = <&key_repeat>;
            key-positions = <25 38 36>;
        };

        combo_slash {
            bindings = <&better_slash>;
            key-positions = <42 30>;
            layers = <0 7 4>;
        };

        combo_backspace_num {
            bindings = <&kp BACKSPACE>;
            key-positions = <41 42>;
            layers = <4>;
        };

        combo_space_num {
            bindings = <&kp SPACE>;
            key-positions = <42 43>;
            layers = <4>;
        };

        combo_quick_switch {
            bindings = <&app_switcher>;
            key-positions = <41 40>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp ESCAPE     &kp C_MUTE            &kp C_VOL_DN          &kp C_VOLUME_UP           &kp LC(LS(ESCAPE))                                                                                                                                                                      &kp LG(P)                       &play_next_prev_td          &kp LG(E)               &kp C_BRIGHTNESS_INC       &kp C_BRIGHTNESS_DEC
&kp EQUAL      &kp N1                &kp N2                &mt PRINTSCREEN NUMBER_3  &kp N4                        &kp N5                                                                                                                                            &kp N6  &kp N7                          &kp N8                      &kp N9                  &kp N0                     &kp MINUS
&kp TAB        &kp Q                 &kp W                 &kp E                     &kp R                         &kp T                                                                                                                                             &kp Y   &kp U                           &kp I                       &kp O                   &kp P                      &kp BSLH
&caps_word_tp  &hrm_left LEFT_GUI A  &hrm_left LEFT_ALT S  &hrm_left LEFT_CONTROL D  &hmr_shift_left LEFT_SHIFT F  &kp G                                                                                                                                             &kp H   &hmr_shift_right RIGHT_SHIFT J  &hrm_right RIGHT_CONTROL K  &hrm_right RIGHT_ALT L  &hrm_right RIGHT_GUI SEMI  &kp SQT
&kp GRAVE      &kp Z                 &kp X                 &kp C                     &kp V                         &kp B   &lt_thumbs_keys 5 ESCAPE     &kp DELETE           &key_repeat      &key_repeat           &kp TAB                 &kp ENTER                &kp N   &kp M                           &kp COMMA                   &kp DOT                 &better_slash              &kp RSHFT
&magic 12 0    &win_desktop_left     &kp LC(PG_UP)         &kp LC(PG_DN)             &win_desktop_right                    &lt_thumbs_keys 3 BACKSPACE  &sk_mo 4 LEFT_SHIFT  &sk_mo 9 DELETE  &sk_mo 9 RIGHT_SHIFT  &sk_shift_caps_word_td  &lt_thumbs_keys 7 SPACE          &better_parentesis              &better_sqr_bracket         &better_braces          &better_anchor             &magic 12 0
            >;
        };

        vim_normal_layer {
            bindings = <
&none   &none        &none                     &none             &none                                                                                                                            &none                                   &none                              &none                       &none          &none
&none   &none        &none                     &none             &none                             &none                                                                          &none           &none                                   &none                              &none                       &none          &none
&none   &none        &kp LC(RIGHT)             &kp LC(RIGHT)     &redo                             &none                                                                          &copy_line      &undo                                   &vim_norm_i                        &vim_o_kp                   &kp LC(V)      &none
&none   &vim_norm_a  &vim_kp_exit_norm DELETE  &vim_norm_delete  &hmr_shift_left LEFT_SHIFT LC(F)  &none                                                                          &kp LEFT_ARROW  &hmr_shift_right LEFT_SHIFT DOWN_ARROW  &hrm_right RIGHT_CONTROL UP_ARROW  &hrm_right RIGHT_ALT RIGHT  &kp RIGHT_WIN  &none
&none   &none        &kp DELETE                &vim_norm_c       &vim_norm_v                       &kp LC(LEFT)  &tog 1  &none  &none  &none  &none  &vim_kp_exit_norm ENTER      &none           &none                                   &none                              &key_repeat                 &none          &none
&trans  &none        &none                     &none             &none                                           &mo 3   &none  &none  &none  &none  &lt_thumbs_keys 7 BACKSPACE                  &kp LC(G)                               &none                              &none                       &none          &trans
            >;
        };

        vim_visual_layer {
            bindings = <
&none   &none  &none                             &none                            &none                                                                                                      &none   &none   &none   &none                      &none
&none   &none  &none                             &none                            &none             &none                                                         &none                      &none   &none   &none   &none                      &none
&none   &none  &trans                            &trans                           &trans            &none                                                         &vim_exit_visual_kp LC(C)  &trans  &tog 2  &none   &vim_exit_visual_kp LC(V)  &none
&none   &none  &vim_exit_visual_and_norm DELETE  &vim_exit_visual_kp LC(X)        &none             &none                                                         &trans                     &trans  &trans  &trans  &none                      &none
&none   &none  &none                             &vim_exit_visual_and_norm LC(X)  &vim_exit_visual  &trans  &vim_exit_visual  &none  &none  &none  &none  &none   &none                      &none   &none   &trans  &none                      &none
&trans  &none  &none                             &none                            &none                     &none             &none  &none  &none  &none  &trans                             &none   &none   &none   &none                      &trans
            >;
        };

        cursor_layer {
            bindings = <
&tog 3   &tog 3             &tog 3     &full_screen_window  &tog 3                                                                                                                                                   &tog 3        &full_screen_window  &tog 3         &tog 3              &tog 3
&kp ESC  &kp RET            &kp K_APP  &kp LC(EQUAL)        &app_switcher_killer                 &kp INSERT                                                                                             &kp INSERT   &kp LC(PLUS)  &kp LC(MINUS)        &kp K_APP      &kp RET             &kp ESC
&none    &layer_mo_tog 6 6  &redo      &undo                &app_switcher_td                     &cut                                                                                                   &kp LG(TAB)  &kp LA(TAB)   &undo                &redo          &paste_copy_cut_td  &kp LC(K)
&none    &kp LGUI           &kp LALT   &kp LCTRL            &key_tog_hold LEFT_SHIFT LEFT_SHIFT  &copy                                                                                                  &kp LEFT     &kp DOWN      &kp UP               &kp RIGHT      &kp BACKSPACE       &kp LC(L)
&none    &key_repeat        &kp SPACE  &kp ENTER            &kp BACKSPACE                        &kp LG(PERIOD)  &kp LA(TAB)  &kp LG(TAB)  &kp TAB  &select_none            &extend_line  &extend_word  &kp HOME     &kp PG_DN     &kp PG_UP            &kp END        &kp LC(F)           &kp LC(J)
&trans   &none              &none      &none                &none                                                &tog 3       &kp LC(TAB)  &tog 3   &selec_all_copy_all_tp  &select_line  &select_word               &kp LC(F)     &kp LC(G)            &kp LC(LS(G))  &kp LC(H)           &kp LG(DOT)
            >;
        };

        number_layer {
            bindings = <
&tog 4          &tog 4                &tog 4        &tog 4            &tog 4                                                                                       &tog 4    &tog 4     &tog 4    &tog 4     &tog 4
&kp ESC         &kp RET               &kp SPACE     &kp TAB           &kp DEL         &kp INSERT                                                        &kp CARET  &kp DLLR  &kp POUND  &kp AT    &kp EXCL   &kp PIPE
&none           &kp P                 &redo         &undo             &kp BSPC        &kp M                                                             &kp PRCNT  &kp N7    &kp N8     &kp N9    &kp COLON  &kp M
&kp KP_NUMLOCK  &hrm_left LEFT_WIN A  &kp LEFT_ALT  &kp LEFT_CONTROL  &sk LEFT_SHIFT  &kp H                                                             &kp PLUS   &kp N4    &kp N5     &kp N6    &kp MINUS  &kp H
&none           &kp LC(A)             &select_line  &kp SPACE         &kp UNDER       &kp MINUS   &kp D  &kp E   &kp F   &kp LT     &kp GT   &kp EQUAL  &kp STAR   &kp N1    &kp N2     &kp N3    &kp SLASH  &kp G
&trans          &none                 &extend_line  &extend_word      &kp X                       &none  &tog 4  &tog 4  &kp COMMA  &kp DOT  &kp N0                &kp LPAR  &kp LBKT   &kp RBKT  &kp RPAR   &kp TILDE
            >;
        };

        function_layer {
            bindings = <
&tog 5           &tog 5          &tog 5        &tog 5            &tog 5                                                                                                              &tog 5                    &tog 5                &tog 5                &tog 5                    &tog 5
&none            &none           &none         &none             &none           &none                                                                                        &none  &kp LC(PLUS)              &kp LC(MINUS)         &kp LC(EQUAL)         &none                     &none
&kp PAUSE_BREAK  &kp SCROLLLOCK  &redo         &undo             &none           &kp PRINTSCREEN                                                                              &none  &kp F7                    &kp F8                &kp F9                &kp F10                   &kp F13
&kp CAPS         &kp LEFT_WIN    &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &rgb_ug RGB_TOG                                                                              &none  &kp F4                    &kp F5                &kp F6                &kp F11                   &kp F14
&none            &kp KP_NUMLOCK  &none         &none             &none           &kp K_SCREENSAVER  &tog 5  &none  &none   &lock_td    &kp K_APPLICATION  &play_next_prev_td  &none  &kp F1                    &kp F2                &kp F3                &kp F12                   &kp F15
&trans           &none           &none         &none             &none                              &none   &none  &tog 5  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP            &kp C_BRIGHTNESS_MAXIMUM  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_MINIMUM  &kp C_BRIGHTNESS_AUTO
            >;
        };

        teams_mst_layer {
            bindings = <
&tog 6      &tog 6            &tog 6            &tog 6            &tog 6                                                                                                                                                                                 &tog 6                   &go_call_unmute_mute_go_back  &tog 6               &tog 6                       &tog 6
&none       &kp LC(N1)        &kp LC(N2)        &kp LC(N3)        &kp LC(N4)         &kp LC(N5)                                                                                                                                           &kp LG(N1)     &kp LA(LS(EQUAL))        &kp LA(LS(MINUS))             &kp LA(LS(N0))       &none                        &none
&kp TAB     &tog 6            &none             &kp LS(LA(UP))    &none              &none                                                                                                                                                &kp LC(LA(U))  &mst_react_td            &mst_key_exit_mst LC(R)       &mst_reply_td        &kp LA(LS(N))                &none
&kp ESCAPE  &none             &kp LS(LA(LEFT))  &kp LS(LA(DOWN))  &kp LS(LA(RIGHT))  &none                                                                                                                                                &kp LC(L)      &kp DOWN                 &kp UP                        &kp LC(M)            &kp LC(J)                    &kp ENTER
&none       &kp LA(N1)        &kp LA(N2)        &kp LA(N3)        &kp LA(N4)         &kp LA(N5)  &tog 6             &none            &kp C_MUTE        &mst_call_cmds_td  &mst_show_screen_vid_td  &mst_raise_hand_go_unmute 0 LC(LS(K))  &mst_offline   &mst_available           &mst_brb                      &mst_away            &mst_key_exit_mst LC(SLASH)  &none
&trans      &kp LS(LG(LEFT))  &none             &none             &kp LS(LG(RIGHT))              &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_PLAY_PAUSE  &mst_go_to_teams   &kp LC(LS(H))            &mt LC(SPACE) LS(LC(M))                               &mst_key_exit_mst LC(F)  &mst_busy                     &full_screen_window  &none                        &trans
            >;
        };

        symbols_layer {
            bindings = <
&tog 7           &tog 7            &tog 7                &tog 7                 &tog 7                                                                                                                  &tog 7                &tog 7     &tog 7     &tog 7                 &tog 7
&none            &kp GRAVE         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp TILDE          &kp SEMICOLON                                                                         &none          &none                 &none      &none      &none                  &none
&kp EXCLAMATION  &kp LEFT_BRACE    &kp SQT               &kp DOUBLE_QUOTES      &kp RIGHT_BRACE    &kp QUESTION                                                                          &kp SEMICOLON  &kp LSHFT             &kp LCTRL  &kp LALT   &kp RIGHT_GUI          &none
&kp HASH         &kp CARET         &kp EQUAL             &kp UNDERSCORE         &kp DOLLAR         &kp ASTERISK                                                                          &kp DOT        &kp SPACE             &kp BSPC   &kp TAB    &kp RET                &none
&kp AT_SIGN      &kp LESS_THAN     &kp PIPE              &kp MINUS              &kp GREATER_THAN   &kp SLASH      &kp NON_US_BACKSLASH  &kp TILDE  &kp AMPERSAND  &none   &none  &none   &kp COMMA      &kp DEL               &kp COMMA  &kp TILDE  &kp SLASH              &none
&kp TILDE        &kp LEFT_BRACKET  &kp AMPERSAND         &kp PLUS               &kp RIGHT_BRACKET                 &kp PERCENT           &kp COLON  &kp SEMICOLON  &tog 7  &none  &tog 7                 &kp LEFT_PARENTHESIS  &kp LBKT   &kp RBKT   &kp RIGHT_PARENTHESIS  &trans
            >;
        };

        vim_symbols_layer {
            bindings = <
&trans  &trans            &trans  &trans  &trans                                                                                  &trans     &trans         &trans  &trans  &trans
&trans  &trans            &trans  &trans  &trans            &trans                                                        &trans  &trans     &trans         &trans  &trans  &trans
&trans  &trans            &trans  &trans  &trans            &kp LC(F)                                                     &trans  &trans     &trans         &trans  &trans  &trans
&trans  &kp HOME          &trans  &trans  &kp END           &kp LC(F)                                                     &trans  &trans     &trans         &trans  &trans  &trans
&trans  &two_kp HOME DEL  &trans  &trans  &two_kp HOME TAB  &kp LC(F)  &kp LC(F)  &trans  &trans  &trans  &trans  &trans  &trans  &trans     &trans         &trans  &kp F   &trans
&trans  &trans            &trans  &trans  &trans                       &trans     &trans  &trans  &trans  &trans  &trans          &kp LC(G)  &kp LC(LS(G))  &trans  &trans  &trans
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT    &kp C_PP                                                                                   &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&none         &none         &none       &my_email     &none           &kp HOME                                                        &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&none         &none         &none       &kp UP        &none           &kp END                                                         &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&none         &none         &kp RIGHT   &kp UP_ARROW  &kp DOWN_ARROW  &kp LEFT_ARROW                                                  &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&none         &kp K_CMENU   &kp END     &kp PAGE_UP   &kp PAGE_DOWN   &kp HOME        &tog 5  &none   &none   &tog 10  &none  &none   &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &none
&magic 0 0    &kp CAPS      &kp INS     &kp F11       &kp F12                         &tog 3  &tog 4  &tog 9  &tog 9   &none  &tog 7             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &magic 0 0
            >;
        };

        gaming_layer {
            bindings = <
&tog 10    &tog 10    &tog 10  &tog 10  &tog 10                                                                                            &tog 10  &tog 10  &tog 10  &tog 10  &tog 10
&trans     &trans     &trans   &trans   &trans   &trans                                                                           &tog 10  &tog 10  &tog 10  &tog 10  &tog 10  &tog 10
&kp MINUS  &kp GRAVE  &kp B    &kp N    &kp M    &kp SQT                                                                          &tog 10  &tog 10  &tog 10  &tog 10  &tog 10  &tog 10
&kp T      &kp TAB    &kp Q    &kp W    &kp E    &kp R                                                                            &tog 10  &tog 10  &tog 10  &tog 10  &tog 10  &tog 10
&kp G      &kp LSHFT  &kp A    &kp S    &kp D    &kp F    &kp ESC    &kp RET          &kp PAUSE_BREAK  &tog 10  &tog 10  &tog 10  &tog 10  &tog 10  &tog 10  &tog 10  &tog 10  &tog 10
&kp V      &kp LCTRL  &kp Z    &kp X    &kp C             &kp SPACE  &lt 11 LEFT_ALT  &kp LGUI         &tog 10  &tog 10  &tog 10           &tog 10  &tog 10  &tog 10  &tog 10  &tog 10
            >;
        };

        gaming_aux_layer {
            bindings = <
&trans  &trans        &trans        &trans        &trans                                                                              &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans                                                        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans        &trans        &trans                                                        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &kp CAPS      &key_repeat   &key_repeat   &trans                                                        &trans  &trans  &trans  &trans  &trans  &trans
&kp N9  &kp NUMBER_4  &kp NUMBER_3  &kp NUMBER_2  &kp NUMBER_1  &kp NUMBER_0  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp N8        &kp N7        &kp NUMBER_6  &kp N5                      &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none                            &none                              &none                                       &none                                                                                                        &none                                     &none                             &none                             &none  &bt BT_CLR_ALL
&none        &none                            &none                              &none                                       &none            &none                                                                                &none  &none                                     &none                             &none                             &none  &none
&none        &rgb_ug RGB_SPI                  &rgb_ug RGB_SAI                    &rgb_ug RGB_HUI                             &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                                      &none  &mo_w_glow 3 RGB_COLOR_HSB_VAL(0,100,50)  &rgb_ug RGB_COLOR_HSB(130,72,64)  &rgb_ug RGB_COLOR_HSB(0,0,100)    &none  &none
&bootloader  &rgb_ug RGB_SPD                  &rgb_ug RGB_SAD                    &rgb_ug RGB_HUD                             &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                                      &none  &rgb_ug RGB_COLOR_HSB(288,100,64)         &rgb_ug RGB_COLOR_HSB(60,87,55)   &rgb_ug RGB_COLOR_HSB(0,0,0)      &none  &bootloader
&sys_reset   &rgb_ug RGB_COLOR_HSB(0,100,50)  &rgb_ug RGB_COLOR_HSB(125,100,50)  &mo_w_glow 3 RGB_COLOR_HSB_VAL(250,100,50)  &none            &none            &bt_2  &bt_3  &none         &none  &none            &lock_td        &none  &rgb_ug RGB_COLOR_HSB(179,100,63)         &rgb_ug RGB_COLOR_HSB(29,100,53)  &rgb_ug RGB_COLOR_HSB(255,34,41)  &none  &sys_reset
&none        &none                            &none                              &rgb_ug RGB_OFF                             &rgb_ug RGB_ON                    &bt_0  &bt_1  &out OUT_USB  &none  &rgb_ug RGB_OFF  &rgb_ug RGB_ON         &none                                     &none                             &none                             &none  &to 0
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        vim_symbols_mode {
            if-layers = <1 7>;
            then-layer = <8>;
        };
    };
};
