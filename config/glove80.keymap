/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        play_prev_next_td: play_prev_next_td {
            compatible = "zmk,behavior-tap-dance";
            label = "PLAY_PREV_NEXT_TD";
            #binding-cells = <0>;
            bindings = <&kp C_PP>, <&kp C_PREV>, <&kp C_NEXT>;
        };

        caps_word_tp: caps_word_tp {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_WORD_TP";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPSLOCK>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        select_none: select_none {
            label = "SN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
        };

    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
           // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1         &kp F2          &kp F3          &kp F4              &kp F5                                                                                                                                         &kp F6        &kp F7     &kp F8    &kp F9        &kp F10
&kp EQUAL      &kp N1          &kp N2          &kp N3              &kp N4            &kp N5                                                                                                              &kp N6   &kp N7        &kp N8     &kp N9    &kp N0        &kp MINUS
&kp TAB        &kp Q           &kp W           &kp E               &kp R             &kp T                                                                                                               &kp Y    &kp U         &kp I      &kp O     &kp P         &kp BSLH
&caps_word_tp  &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &lt 0 G                                                                                                             &lt 0 H  &kp J         &kp K      &kp L     &kp SEMI      &kp SQT
&kp GRAVE      &kp Z           &kp X           &kp C               &kp V             &kp B    &kp ESC   &kp LS(LA(LCTRL))  &kp LS(LG(LA(LCTRL)))  &kp LS(LG(LA(RCTRL)))  &kp LS(LA(RCTRL))  &kp RET      &kp N    &kp M         &kp COMMA  &kp DOT   &kp FSLH      &kp RSHFT
&magic 2 0     &kp HOME        &kp PG_UP       &kp PG_DN           &kp END                    &kp BSPC  &kp DEL            &kp LSHFT              &kp LSHFT              &kp TAB            &lt 5 SPACE           &kp LS(LPAR)  &kp LBKT   &kp RBKT  &kp LS(RPAR)  &magic 2 0
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                         &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&trans        &none         &none       &none       &none      &kp HOME                                                   &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&trans        &none         &none       &kp UP      &none      &kp END                                                    &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&trans        &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                  &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&trans        &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &trans  &trans  &to 0   &trans  &trans  &trans  &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&trans        &kp CAPS      &kp INS     &kp F11     &kp F12               &trans  &trans  &trans  &trans  &trans  &tog 5             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };

        no-repeat-homerows {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                              &trans  &trans  &trans  &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                              &trans  &trans  &trans  &trans  &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                              &trans  &trans  &trans  &trans  &trans         &trans
&trans  &kp A   &kp S   &kp D   &kp F   &trans                                                              &trans  &kp J   &kp K   &kp L   &kp SEMICOLON  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp ESCAPE     &trans   &trans  &trans  &trans   &kp ENTER  &trans  &trans  &trans  &trans  &trans         &trans
&trans  &trans  &trans  &trans  &trans          &kp BACKSPACE  &kp DEL  &trans  &trans  &kp TAB  &kp SPACE          &trans  &trans  &trans  &trans         &trans
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        symbols {
            bindings = <
&none            &none           &none                 &none                  &none                                                                                                                &none                 &none        &none     &none                  &none
&none            &kp GRAVE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMICOLON     &kp COMMA                                                                           &none          &none                 &none        &none     &none                  &none
&kp EXCLAMATION  &kp LEFT_BRACE  &kp SQT               &kp DOUBLE_QUOTES      &kp RIGHT_BRACE   &kp QUESTION                                                                        &kp SEMICOLON  &kp LSHFT             &kp LCTRL    &kp LALT  &kp RIGHT_GUI          &none
&kp HASH         &kp CARET       &kp EQUAL             &kp UNDERSCORE         &kp DOLLAR        &kp ASTERISK                                                                        &kp DOT        &kp SPACE             &kp BSPC     &kp TAB   &kp RET                &none
&kp AT_SIGN      &kp LESS_THAN   &kp PIPE              &kp MINUS              &kp GREATER_THAN  &kp NON_US_BACKSLASH  &kp SLASH    &kp PERIOD  &kp ASTERISK   &none   &none  &none  &kp FSLH       &kp DEL               &kp LS(TAB)  &none     &none                  &none
&kp TILDE        &kp AMPERSAND   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PLUS                                &kp PERCENT  &kp COLON   &kp SEMICOLON  &tog 5  &none  &none                 &kp LEFT_PARENTHESIS  &kp LBKT     &kp RBKT  &kp RIGHT_PARENTHESIS  &none
            >;
        };

        number {
            bindings = <
&none           &none           &none         &none          &none                                                                                                  &none                 &none      &none        &none                  &none
&kp ESC         &kp RET         &kp SPACE     &kp TAB        &kp DEL         &kp F                                                                    &kp CARET     &kp DOLLAR            &kp POUND  &kp AT_SIGN  &kp EXCLAMATION        &kp PIPE
&none           &sk LEFT_SHIFT  &kp LC(Y)     &kp LC(Z)      &kp BSPC        &kp A                                                                    &kp PERCENT   &kp N7                &kp N8     &kp N9       &kp COLON              &kp K
&kp KP_NUMLOCK  &kp LEFT_WIN    &kp LEFT_ALT  &kp LCTRL      &kp LSHFT       &kp B                                                                    &kp PLUS      &kp N4                &kp N5     &kp N6       &kp MINUS              &kp J
&none           &kp LC(A)       &kp HOME      &kp LC(RIGHT)  &kp UNDERSCORE  &kp C  &kp D  &kp E  &kp F   &kp LESS_THAN  &kp GREATER_THAN  &kp EQUAL  &kp ASTERISK  &kp N1                &kp N2     &kp N3       &kp FSLH               &kp G
&none           &none           &none         &none          &kp X                  &none  &none  &tog 6  &kp COMMA      &kp DOT           &kp N0                   &kp LEFT_PARENTHESIS  &kp LBKT   &kp RBKT     &kp RIGHT_PARENTHESIS  &kp TILDE
            >;
        };
    };
};
