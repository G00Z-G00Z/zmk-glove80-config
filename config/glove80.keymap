/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 *  
 * Important notes, labels cannot be long
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

&key_repeat { usage-pages = <HID_USAGE_KEY HID_USAGE_CONSUMER>; };

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        // Play / Next / Prev button

        play_next_prev_td: play_next_prev_td {
            compatible = "zmk,behavior-tap-dance";
            label = "PLAY_NEXT_PREV_TD";
            #binding-cells = <0>;
            bindings = <&kp C_PP>, <&kp C_NEXT>, <&kp C_PREV>;
        };

        // Caps word and dt for CAPSLOCK 

        caps_word_tp: caps_word_tp {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_WORD_TP";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPSLOCK>;
        };

        /* Selection behaviours morphs
         *
         * This behaviours select text in a particular way.
         * They default to selecting to the right, but when shifted, they go to the left
         *
         * They depend on the 'selection' macros
         */

        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            label = "SELECT_WORD";
            bindings = <&select_word_right>, <&select_word_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        extend_word: extend_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_word_right>, <&extend_word_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        extend_line: extend_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_line_right>, <&extend_line_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        select_line: select_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_line_right>, <&select_line_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sticky_lower_layer: sticky_lower_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_LOWER_LAYER";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        // 1t: selet all, 2t: cut all, 3t: copy all

        selec_all_copy_all_tp: selec_all_copy_all_tp {
            compatible = "zmk,behavior-tap-dance";
            label = "SELEC_ALL_COPY_ALL_TP";
            #binding-cells = <0>;
            bindings = <&kp LC(A)>, <&select_all_cut>, <&select_and_copy_all>;
        };

        // dt the ' to screenshot (convinient)

        screenshot_td: screenshot_td {
            compatible = "zmk,behavior-tap-dance";
            label = "SCREENSHOT_TD";
            #binding-cells = <0>;
            bindings = <&kp SQT>, <&kp PRINTSCREEN>;
        };

        // Hold like shift key, and tap to toggle it

        key_tog_hold: key_tog_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "KEY_TOG_HOLD";
            bindings = <&kp>, <&kt>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        // 1t: show screen, 2t: toggle camera

        mst_show_screen_vid_td: mst_show_screen_vid_td {
            compatible = "zmk,behavior-tap-dance";
            label = "Show screen and toggle video";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(E))>, <&kp LS(LC(O))>;
        };

        // 1t: go to call window, 2t: answer call from toast, 3t: Call someone from the chat

        mst_call_cmds_td: mst_call_cmds_td {
            compatible = "zmk,behavior-tap-dance";
            label = "MST_CALL_CMDS_TD";
            #binding-cells = <0>;
            bindings = <&mst_go_call>, <&kp LS(LC(J))>, <&kp LA(LS(A))>;
        };

        layer_mo_tog: layer_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold for mo and tap tog";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        // 1t: reply to selcted message, 2t: reply to last message

        mst_reply_td: mst_reply_td {
            compatible = "zmk,behavior-tap-dance";
            label = "MST_REPLY_TD";
            #binding-cells = <0>;
            bindings = <&mst_reply_current_msg>, <&mst_reply_last_msg>;
        };

        // 1t: react happy to selcted message, 2t: react happy to last message

        mst_react_td: mst_react_td {
            compatible = "zmk,behavior-tap-dance";
            label = "MST_REACT_TD";
            #binding-cells = <0>;
            bindings = <&mst_react_happy>, <&mst_react_last_msg>;
        };

        /* 
        * Home row mods
        *
        * This mods allow you to put modifiers in the home row, and be comfortable. Inspiration from: https://github.com/urob/zmk-config
        *
        * 1. Do not allow same hand mods (avoids collitions from the same hand)
        * 2. Quick tapping for tap hold behavior
        * 3. Hold trigger on release allows you to write fast without activating false positives
        *
        * There is a left and right version of the behaviour. You must put them accordingly
        */

        hrm_left: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <55 56 57 72 73 74 40 58 28 16 6 7 8 9 18 19 20 21 30 31 32 33 42 43 44 45 60 61 62 63 76 77 78 79 5 6 17 18 29 30 41 42 59 60 75 76 52 53 54 70 71 69>;
            hold-trigger-on-release;
        };

        hrm_right: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HRM_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <0 2 3 4 14 13 12 10 11 1 22 23 35 34 46 47 64 65 66 67 68 69 70 71 54 53 52 50 48 49 37 36 24 25 26 15 39 38 27 51 55 56 57 74 73 72>;
            hold-trigger-on-release;
        };

        // Similar to HRM but in thumbs for custom behaviour

        lt_thumbs_keys: lt_thumbs_keys {
            compatible = "zmk,behavior-hold-tap";
            label = "LT_THUMBS_KEYS";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <300>;
            flavor = "tap-preferred";
        };

        paste_copy_cut_td: paste_copy_cut_td {
            compatible = "zmk,behavior-tap-dance";
            label = "PASTE_COPY_CUT_TD";
            #binding-cells = <0>;
            bindings = <&paste>, <&copy>, <&cut>;
        };

        lock_td: lock_td {
            compatible = "zmk,behavior-tap-dance";
            label = "LOCK_TD";
            #binding-cells = <0>;
            bindings = <&kp LG(L)>, <&kp LG(ESCAPE)>;
        };
    };

    macros {
        // Bluethoot profile macros, DO NOT TOUCH

        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        // Selection Macros

        select_none: select_none {
            label = "SN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
        };

        select_word_right: select_word_right {
            compatible = "zmk,behavior-macro";
            label = "SELECT_WORD_RIGHT";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
        };

        select_word_left: select_word_left {
            compatible = "zmk,behavior-macro";
            label = "SELECT_WORD_LEFT";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT_ARROW) &kp LC(RIGHT) &kp LC(LS(LEFT_ARROW))>;
        };

        extend_word_right: extend_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(RIGHT))>;
            label = "EXTEND_WORD_RIGHT";
        };

        extend_word_left: extend_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LEFT_ARROW))>;
            label = "EXTEND_WORD_LEFT";
        };

        select_line_right: select_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "SELECT_LINE_RIGHT";
        };

        select_line_left: select_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME)>;
            label = "SELECT_LINE_LEFT";
        };

        extend_line_left: extend_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(UP) &kp LS(HOME)>;
            label = "EXTEND_LINE_LEFT";
        };

        extend_line_right: extend_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOWN) &kp LS(END)>;
            label = "EXTEND_LINE_RIGHT";
        };

        // Text manipulation

        undo: undo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RC(Z)>;
            label = "UNDO";
        };

        redo: redo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Y)>;
            label = "REDO";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(X)>;
            label = "CUT";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>;
            label = "PASTE";
        };

        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>;
            label = "COPY";
        };

        my_email: my_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp D &kp Y &kp G &kp O &kp M &kp E &kp Z &kp G &kp G &kp N4 &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "MY_EMAIL";
        };

        win_desktop_right: win_right_desktop {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LG(RIGHT))>;
            label = "WIN_RIGHT_DESKTOP";
        };

        win_desktop_left: win_desktop_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LG(LEFT))>;
            label = "WIN_DESKTOP_LEFT";
        };

        close_app: close_app {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(F4)>;
            label = "CLOSE_APP";
        };

        select_and_copy_all: select_and_copy_all {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp LC(C) &kp RIGHT>;
            label = "SELECT_AND_COPY_ALL";
        };

        select_all_cut: select_all_cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A) &kp LC(X) &kp RIGHT>;
            label = "SELECT_ALL_CUT";
        };

        // Microsoft Teams (mst) layer macros

        mst_available: mst_available {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(SLASH) &kp A &kp V &kp A &kp I &kp L &kp A &kp B &kp L>,
                <&macro_wait_time 200>,
                <&kp E &kp ENTER>;

            label = "mst_AVAILABLE";
        };

        mst_busy: mst_busy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(SLASH) &kp B &kp U &kp S>,
                <&macro_wait_time 200>,
                <&kp Y &kp ENTER>;

            label = "mst_BUSY";
        };

        mst_brb: mst_brb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(SLASH) &kp B &kp R>,
                <&macro_wait_time 200>,
                <&kp B &kp ENTER>;

            label = "mst_BRB";
        };

        mst_offline: mst_offline {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(SLASH) &kp O &kp F &kp F &kp L &kp I &kp N>,
                <&macro_wait_time 200>,
                <&kp E &kp ENTER>;

            label = "mst_OFFLINE";
        };

        mst_away: mst_away {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp LC(SLASH) &kp A &kp W &kp A>,
                <&macro_wait_time 200>,
                <&kp Y &kp ENTER>;

            label = "mst_AWAY";
        };

        mst_go_call: mst_go_call {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kt LEFT_WIN>,
                <&macro_wait_time 100>,
                <&kp N1 &kp NUMBER_1 &kt LEFT_WIN>;

            label = "MST_GO_CALL";
        };

        mst_reply_current_msg: mst_reply_current_msg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ENTER &kp TAB &kp ENTER &tog 5>;
            label = "MST_REPLY_CURRENT_MSG";
        };

        mst_react_happy: mst_react_happy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp ENTER &kp ENTER &kp ESCAPE>;
            label = "MST_REACT_HAPPY";
        };

        mst_react_last_msg: mst_react_last_msg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(R)) &kp ENTER &kp ESCAPE>;
            label = "MST_REACT_LAST_MSG";
        };

        mst_key_exit_mst: mst_key_exit_mst {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&macro_param_1to1 &kp MACRO_PLACEHOLDER &tog 5>;
            label = "MST_KEY_EXIT_MST";
        };

        mst_reply_last_msg: mst_reply_last_msg {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(R) &kp LS(TAB) &kp ENTER &kp TAB &kp ENTER &tog 5>;
            label = "MST_REPLY_LAST_MSG";
        };
    };

    combos {
        // IMPORTANT NOTICE: This combos are based in QWERTY layout

        compatible = "zmk,combos";

        // w + l (vim like) to switch to workspace in the right

        combo_win_desktop_right {
            bindings = <&win_desktop_right>;
            key-positions = <43 24>;
            require-prior-idle-ms = <100>;
        };

        // w + h (vim like) to switch to workspace in the left

        combo_win_desktop_left {
            bindings = <&win_desktop_left>;
            key-positions = <40 24>;
            require-prior-idle-ms = <100>;
        };

        // WIN + Q becomes ALT + F4 (closes any app)

        combo_alt_close_app {
            bindings = <&close_app>;
            key-positions = <44 23>;
            require-prior-idle-ms = <100>;
        };

        /*
        *
        * MST (Microsoft Teams) combos 
        *
        * This combos are available in the teams layer
        * */
        // j + k for putting available status

        combo_mst_enter {
            bindings = <&kp ENTER>;
            key-positions = <41 42>;
            layers = <5>;
        };

        // l + k for putting available brb

        combo_mst_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <42 43>;
            layers = <5>;
        };

        // u+i This toggles temas layer. Available in base layer and teams layer for easy transitioning

        combo_toggle_teams {
            bindings = <&tog 5>;
            key-positions = <29 30>;
            require-prior-idle-ms = <200>;
            layers = <0 5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1         &kp F2                &kp F3                &kp F4                    &kp F5                                                                                                                                                                                                      &kp F6                    &kp F7                      &kp F8                  &kp F9                     &kp F10
&kp EQUAL      &kp N1                &kp N2                &kp N3                    &kp N4                  &kp N5                                                                                                                                                                     &kp N6   &kp N7                    &kp N8                      &kp N9                  &kp N0                     &kp MINUS
&kp TAB        &kp Q                 &kp W                 &kp E                     &kp R                   &kp T                                                                                                                                                                      &kp Y    &kp U                     &kp I                       &kp O                   &kp P                      &kp BSLH
&caps_word_tp  &hrm_left LEFT_GUI A  &hrm_left LEFT_ALT S  &hrm_left LEFT_CONTROL D  &hrm_left LEFT_SHIFT F  &lt 8 G                                                                                                                                                                    &lt 8 H  &hrm_right RIGHT_SHIFT J  &hrm_right RIGHT_CONTROL K  &hrm_right RIGHT_ALT L  &hrm_right RIGHT_GUI SEMI  &screenshot_td
&kp GRAVE      &kp Z                 &kp X                 &kp C                     &kp V                   &kp B    &lt_thumbs_keys 4 ESCAPE     &key_repeat               &sk LS(LA(LC(LCTRL)))             &sk LS(LA(LC(LEFT_CONTROL)))       &key_repeat  &none                    &kp N    &kp M                     &kp COMMA                   &kp DOT                 &kp FSLH                   &kp RSHFT
&magic 9 0     &win_desktop_left     &kp LC(PG_UP)         &kp LC(PG_DN)             &win_desktop_right               &lt_thumbs_keys 1 BACKSPACE  &lt_thumbs_keys 3 DELETE  &sticky_lower_layer 6 LEFT_SHIFT  &sticky_lower_layer 6 RIGHT_SHIFT  &kp TAB      &lt_thumbs_keys 2 SPACE           &kp LS(LPAR)              &kp LBKT                    &kp RBKT                &kp LS(RPAR)               &magic 9 0
            >;
        };

        cursor_layer {
            bindings = <
&trans     &trans             &trans        &trans        &trans                                                                                                                                               &trans             &trans         &trans     &trans              &trans
&kp ESC    &kp RET            &kp SPACE     &kp TAB       &kp DEL                              &kp INSERT                                                                                         &kp INSERT   &kp K_APPLICATION  &kp TAB        &kp SPACE  &kp RET             &kp ESC
&kp LC(K)  &layer_mo_tog 5 5  &redo         &undo         &kp BSPC                             &cut                                                                                               &kp LG(TAB)  &kp LA(TAB)        &undo          &redo      &paste_copy_cut_td  &kp LC(K)
&kp LC(L)  &kp LGUI           &kp LALT      &kp LCTRL     &key_tog_hold LEFT_SHIFT LEFT_SHIFT  &copy                                                                                              &kp LEFT     &kp DOWN           &kp UP         &kp RIGHT  &kp BACKSPACE       &kp LC(L)
&kp LC(J)  &key_repeat        &kp SPACE     &kp ENTER     &kp BACKSPACE                        &paste      &kp LA(TAB)  &kp LG(TAB)  &kp TAB  &select_none            &extend_line  &extend_word  &kp HOME     &kp PG_DN          &kp PG_UP      &kp END    &paste_copy_cut_td  &kp LC(J)
&trans     &kp LS(LC(G))      &extend_line  &extend_word  &kp LC(G)                                        &none        &kp LC(TAB)  &tog 1   &selec_all_copy_all_tp  &select_line  &select_word               &kp LC(F)          &kp LC(LS(G))  &kp LC(G)  &kp LC(H)           &kp LG(DOT)
            >;
        };

        symbols_layer {
            bindings = <
&none            &none           &none                 &none                  &none                                                                                                                &none                 &none        &none     &none                  &none
&none            &kp GRAVE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMICOLON     &kp COMMA                                                                           &none          &none                 &none        &none     &none                  &none
&kp EXCLAMATION  &kp LEFT_BRACE  &kp SQT               &kp DOUBLE_QUOTES      &kp RIGHT_BRACE   &kp QUESTION                                                                        &kp SEMICOLON  &kp LSHFT             &kp LCTRL    &kp LALT  &kp RIGHT_GUI          &none
&kp HASH         &kp CARET       &kp EQUAL             &kp UNDERSCORE         &kp DOLLAR        &kp ASTERISK                                                                        &kp DOT        &kp SPACE             &kp BSPC     &kp TAB   &kp RET                &none
&kp AT_SIGN      &kp LESS_THAN   &kp PIPE              &kp MINUS              &kp GREATER_THAN  &kp NON_US_BACKSLASH  &kp SLASH    &kp PERIOD  &kp ASTERISK   &none   &none  &none  &kp FSLH       &kp DEL               &kp LS(TAB)  &none     &none                  &none
&kp TILDE        &kp AMPERSAND   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PLUS                                &kp PERCENT  &kp COLON   &kp SEMICOLON  &tog 2  &none  &none                 &kp LEFT_PARENTHESIS  &kp LBKT     &kp RBKT  &kp RIGHT_PARENTHESIS  &trans
            >;
        };

        number_layer {
            bindings = <
&none           &none         &none         &none             &none                                                                                                            &none     &none      &none     &none      &none
&kp ESC         &kp RET       &kp SPACE     &kp TAB           &kp DEL                              &kp INSERT                                                       &kp CARET  &kp DLLR  &kp POUND  &kp AT    &kp EXCL   &kp PIPE
&none           &kp LSHFT     &redo         &undo             &kp BSPC                             &kp SPACE                                                        &kp PRCNT  &kp N7    &kp N8     &kp N9    &kp COLON  &kp K
&kp KP_NUMLOCK  &kp LEFT_WIN  &kp LEFT_ALT  &kp LEFT_CONTROL  &key_tog_hold LEFT_SHIFT LEFT_SHIFT  &kp B                                                            &kp PLUS   &kp N4    &kp N5     &kp N6    &kp MINUS  &kp J
&none           &kp LC(A)     &select_line  &select_word      &kp UNDER                            &kp C       &kp D  &kp E  &kp F   &kp LT     &kp GT   &kp EQUAL  &kp STAR   &kp N1    &kp N2     &kp N3    &kp SLASH  &kp G
&trans          &none         &extend_line  &extend_word      &kp X                                            &none  &none  &tog 3  &kp COMMA  &kp DOT  &kp N0                &kp LPAR  &kp LBKT   &kp RBKT  &kp RPAR   &kp TILDE
            >;
        };

        function_layer {
            bindings = <
&none            &none           &none         &none             &none                                                                                                              &none                     &none                 &none                 &none                     &none
&none            &none           &none         &none             &none           &none                                                                                       &none  &kp LC(MINUS)             &kp LC(PLUS)          &kp LC(EQUAL)         &none                     &none
&kp PAUSE_BREAK  &kp SCROLLLOCK  &redo         &undo             &none           &kp PRINTSCREEN                                                                             &none  &kp F7                    &kp F8                &kp F9                &kp F10                   &kp F13
&kp CAPS         &kp LEFT_WIN    &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &rgb_ug RGB_TOG                                                                             &none  &kp F4                    &kp F5                &kp F6                &kp F11                   &kp F14
&none            &kp KP_NUMLOCK  &none         &none             &none           &kp K_SCREENSAVER  &none  &none  &none   &lock_td    &kp K_APPLICATION  &play_next_prev_td  &none  &kp F1                    &kp F2                &kp F3                &kp F12                   &kp F15
&trans           &none           &none         &none             &none                              &none  &none  &tog 4  &kp C_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP            &kp C_BRIGHTNESS_MAXIMUM  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_MINIMUM  &kp C_BRIGHTNESS_AUTO
            >;
        };

        // This is the teams layer for shorcuts for the Microsoft Teams desktop app

        teams_mst_layer {
            bindings = <
&none       &none       &none             &none             &none                                                                                                                                                               &none                    &none                    &none           &none                        &none
&none       &kp LC(N1)  &kp LC(N2)        &kp LC(N3)        &kp LC(N4)         &kp LC(N5)                                                                                                                        &kp LG(N1)     &kp LA(LS(EQUAL))        &kp LA(LS(MINUS))        &kp LA(LS(N0))  &none                        &none
&kp TAB     &tog 6      &none             &kp LS(LA(UP))    &none              &none                                                                                                                             &kp LC(LA(U))  &mst_react_td            &mst_key_exit_mst LC(R)  &mst_reply_td   &kp LA(LS(N))                &none
&kp ESCAPE  &none       &kp LS(LA(LEFT))  &kp LS(LA(DOWN))  &kp LS(LA(RIGHT))  &none                                                                                                                             &kp LC(L)      &kp DOWN                 &kp UP                   &kp LC(M)       &kp LC(J)                    &kp ENTER
&none       &kp LA(N1)  &kp LA(N2)        &kp LA(N3)        &kp LA(N4)         &kp LA(N5)  &tog 6           &none         &kp C_MUTE        &mst_call_cmds_td  &mst_show_screen_vid_td  &kp LC(LS(K))            &mst_offline   &mst_available           &mst_brb                 &mst_away       &mst_key_exit_mst LC(SLASH)  &none
&trans      &none       &none             &none             &none                          &kp C_VOLUME_UP  &kp C_VOL_DN  &kp C_PLAY_PAUSE  &kp LG(NUMBER_1)   &kp LC(LS(H))            &mt LC(SPACE) LS(LC(M))                 &mst_key_exit_mst LC(F)  &mst_busy                &kp LG(N1)      &none                        &trans
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                                                                        &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&none         &none         &none       &my_email   &none      &kp HOME                                                                                                  &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&none         &tog 5        &none       &kp UP      &none      &kp END                                                                                                   &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&none         &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                                                                 &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&none         &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &tog 4  &none   &none                        &none                              &none  &none   &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &none
&magic 0 0    &kp CAPS      &kp INS     &kp F11     &kp F12               &tog 1  &tog 3  &sticky_lower_layer 6 LSHFT  &sticky_lower_layer 6 RIGHT_SHIFT  &none  &tog 2             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &magic 0 0
            >;
        };

        gaming_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1         &kp F2    &kp F3     &kp F4     &kp F5                                                                                                                              &kp F6        &kp F7     &kp F8    &kp F9        &kp F10
&kp EQUAL      &kp N1    &kp N2     &kp N3     &kp N4   &kp N5                                                                                                             &kp N6  &kp N7        &kp N8     &kp N9    &kp N0        &kp MINUS
&kp TAB        &kp Q     &kp W      &kp E      &kp R    &kp T                                                                                                              &kp Y   &kp U         &kp I      &kp O     &kp P         &kp BSLH
&caps_word_tp  &kp A     &kp S      &kp D      &kp F    &kp G                                                                                                              &kp H   &kp J         &kp K      &kp L     &kp SEMI      &kp SQT
&kp GRAVE      &kp Z     &kp X      &kp C      &kp V    &kp B   &kp ESC   &kp LS(LA(LCTRL))  &kp LS(LG(LA(LCTRL)))  &kp LS(LG(LA(RCTRL)))  &kp LS(LA(RCTRL))  &kp RET      &kp N   &kp M         &kp COMMA  &kp DOT   &kp FSLH      &kp RSHFT
&magic 0 0     &kp HOME  &kp PG_UP  &kp PG_DN  &kp END          &kp BSPC  &kp DEL            &kp LSHFT              &kp LSHFT              &kp TAB            &lt 3 SPACE          &kp LS(LPAR)  &kp LBKT   &kp RBKT  &kp LS(RPAR)  &magic 0 0
            >;
        };

        no_repeat_homerows_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                              &trans  &trans  &trans  &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                              &trans  &trans  &trans  &trans  &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                              &trans  &trans  &trans  &trans  &trans         &trans
&trans  &kp A   &kp S   &kp D   &kp F   &trans                                                              &trans  &kp J   &kp K   &kp L   &kp SEMICOLON  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp ESCAPE     &trans   &trans  &trans  &trans   &kp ENTER  &trans  &trans  &trans  &trans  &trans         &trans
&trans  &trans  &trans  &trans  &trans          &kp BACKSPACE  &kp DEL  &trans  &trans  &kp TAB  &kp SPACE          &trans  &trans  &trans  &trans         &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                        &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                                &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                      &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                      &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &lock_td  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none            &none  &none  &none  &none  &to 0
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };
    };
};
