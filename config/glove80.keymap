/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        // Play / Next / Prev button

        play_next_prev_td: play_next_prev_td {
            compatible = "zmk,behavior-tap-dance";
            label = "PLAY_NEXT_PREV_TD";
            #binding-cells = <0>;
            bindings = <&kp C_PP>, <&kp C_NEXT>, <&kp C_PREV>;
        };

        caps_word_tp: caps_word_tp {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS_WORD_TP";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPSLOCK>;
        };

        /* Selection behaviours morphs
         *
         * This behaviours select text in a particular way.
         * They default to selecting to the right, but when shifted, they go to the left
         *
         * They depend on the 'selection' macros
         */

        select_word: select_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            label = "SELECT_WORD";
            bindings = <&select_word_right>, <&select_word_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        extend_word: extend_word {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_word_right>, <&extend_word_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        extend_line: extend_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&extend_line_right>, <&extend_line_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        select_line: select_line {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&select_line_right>, <&select_line_left>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        sticky_lower_layer: sticky_lower_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "STICKY_LOWER_LAYER";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    macros {
        // Bluethoot profile macros, DO NOT TOUCH

        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        // Selection Macros

        select_none: select_none {
            label = "SN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
        };

        select_word_right: select_word_right {
            compatible = "zmk,behavior-macro";
            label = "SELECT_WORD_RIGHT";
            #binding-cells = <0>;
            bindings = <&kp LC(RIGHT) &kp LC(LEFT) &kp LC(LS(RIGHT))>;
        };

        select_word_left: select_word_left {
            compatible = "zmk,behavior-macro";
            label = "SELECT_WORD_LEFT";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT_ARROW) &kp LC(RIGHT) &kp LC(LS(LEFT_ARROW))>;
        };

        extend_word_right: extend_word_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(RIGHT))>;
            label = "EXTEND_WORD_RIGHT";
        };

        extend_word_left: extend_word_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LEFT_ARROW))>;
            label = "EXTEND_WORD_LEFT";
        };

        select_line_right: select_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "SELECT_LINE_RIGHT";
        };

        select_line_left: select_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME)>;
            label = "SELECT_LINE_LEFT";
        };

        extend_line_left: extend_line_left {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(UP) &kp LS(HOME)>;
            label = "EXTEND_LINE_LEFT";
        };

        extend_line_right: extend_line_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(DOWN) &kp LS(END)>;
            label = "EXTEND_LINE_RIGHT";
        };

        // Text manipulation

        undo: undo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RC(Z)>;
            label = "UNDO";
        };

        redo: redo {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(Y)>;
            label = "REDO";
        };

        cut: cut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(X)>;
            label = "CUT";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(V)>;
            label = "PASTE";
        };

        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(C)>;
            label = "COPY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1         &kp F2          &kp F3          &kp F4              &kp F5                                                                                                                                                &kp F6        &kp F7     &kp F8    &kp F9        &kp F10
&kp EQUAL      &kp N1          &kp N2          &kp N3              &kp N4            &kp N5                                                                                                                     &kp N6   &kp N7        &kp N8     &kp N9    &kp N0        &kp MINUS
&kp TAB        &kp Q           &kp W           &kp E               &kp R             &kp T                                                                                                                      &kp Y    &kp U         &kp I      &kp O     &kp P         &kp BSLH
&caps_word_tp  &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LEFT_CONTROL D  &mt LEFT_SHIFT F  &lt 2 G                                                                                                                    &lt 2 H  &mt RIGHT_SHIFT J         &mt RIGHT_CONTROL K      &mt RIGHT_ALT L     &mt RIGHT_GUI SEMI      &kp SQT
&kp GRAVE      &kp Z           &kp X           &kp C               &kp V             &kp B    &lt 6 ESCAPE     &kp LS(LA(LCTRL))  &kp LS(LG(LA(LCTRL)))  &kp LS(LG(LA(RCTRL)))  &kp LS(LA(RCTRL))  &lt 5 ENTER  &kp N    &kp M         &kp COMMA  &kp DOT   &kp FSLH      &kp RSHFT
&magic 1 0     &kp HOME        &kp PG_UP       &kp PG_DN           &kp END                    &lt 3 BACKSPACE  &lt 11 DELETE      &kp LSHFT              &kp LSHFT              &kp TAB            &lt 4 SPACE           &kp LS(LPAR)  &kp LBKT   &kp RBKT  &kp LS(RPAR)  &magic 1 0
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };

        no_repeat_homerows_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                              &trans  &trans  &trans  &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                              &trans  &trans  &trans  &trans  &trans         &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                              &trans  &trans  &trans  &trans  &trans         &trans
&trans  &kp A   &kp S   &kp D   &kp F   &trans                                                              &trans  &kp J   &kp K   &kp L   &kp SEMICOLON  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &kp ESCAPE     &trans   &trans  &trans  &trans   &kp ENTER  &trans  &trans  &trans  &trans  &trans         &trans
&trans  &trans  &trans  &trans  &trans          &kp BACKSPACE  &kp DEL  &trans  &trans  &kp TAB  &kp SPACE          &trans  &trans  &trans  &trans         &trans
            >;
        };

        cursor_layer {
            bindings = <
&trans     &trans         &trans        &trans        &trans                                                                                                          &trans     &trans         &trans     &trans     &trans
&kp ESC    &kp RET        &kp SPACE     &kp TAB       &kp DEL    &kp INSERT                                                                               &kp INSERT  &kp DEL    &kp TAB        &kp SPACE  &kp RET    &kp ESC
&kp LC(K)  &sk LSHFT      &redo         &undo         &kp BSPC   &cut                                                                                     &sk LSHFT   &kp BSPC   &undo          &redo      &cut       &kp LC(K)
&kp LC(L)  &kp LGUI       &kp LALT      &kp LCTRL     &kp LSHFT  &copy                                                                                    &kp LEFT    &kp DOWN   &kp UP         &kp RIGHT  &copy      &kp LC(L)
&kp LC(J)  &kp LC(A)      &select_line  &select_word  &kp LC(F)  &paste      &kp LA(TAB)  &kp LG(TAB)  &kp TAB  &select_none  &extend_line  &extend_word  &kp HOME    &kp PG_DN  &kp PG_UP      &kp END    &paste     &kp LC(J)
&kp LC(H)  &kp LS(LC(G))  &extend_line  &extend_word  &kp LC(G)              &none        &kp LC(TAB)  &tog 3   &kp LC(A)     &select_line  &select_word              &kp LC(F)  &kp LC(LS(G))  &kp LC(G)  &kp LC(H)  &kp LG(DOT)
            >;
        };

        symbols_layer {
            bindings = <
&none            &none           &none                 &none                  &none                                                                                                                 &none                 &none        &none     &none                  &none
&none            &kp GRAVE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMICOLON     &kp COMMA                                                                            &none          &none                 &none        &none     &none                  &none
&kp EXCLAMATION  &kp LEFT_BRACE  &kp SQT               &kp DOUBLE_QUOTES      &kp RIGHT_BRACE   &kp QUESTION                                                                         &kp SEMICOLON  &kp LSHFT             &kp LCTRL    &kp LALT  &kp RIGHT_GUI          &none
&kp HASH         &kp CARET       &kp EQUAL             &kp UNDERSCORE         &kp DOLLAR        &kp ASTERISK                                                                         &kp DOT        &kp SPACE             &kp BSPC     &kp TAB   &kp RET                &none
&kp AT_SIGN      &kp LESS_THAN   &kp PIPE              &kp MINUS              &kp GREATER_THAN  &kp NON_US_BACKSLASH  &kp SLASH    &kp PERIOD  &kp ASTERISK   &none    &none  &none  &kp FSLH       &kp DEL               &kp LS(TAB)  &none     &none                  &none
&kp TILDE        &kp AMPERSAND   &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PLUS                                &kp PERCENT  &kp COLON   &kp SEMICOLON  &tog 10  &none  &none                 &kp LEFT_PARENTHESIS  &kp LBKT     &kp RBKT  &kp RIGHT_PARENTHESIS  &none
            >;
        };

        system_layer {
            bindings = <
&none            &none            &none            &none            &none                                                                                                                         &none               &none            &none            &none            &none
&none            &none            &none            &none            &none            &none                                                                                       &none            &none               &none            &none            &none            &none
&none            &none            &rgb_ug RGB_HUD  &rgb_ug RGB_HUI  &none            &none                                                                                       &rgb_ug RGB_SAI  &kp LSHFT           &kp LCTRL        &kp LALT         &kp RIGHT_GUI    &rgb_ug RGB_SAD
&rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF  &kp K_CONTEXT_MENU                                                                          &rgb_ug RGB_HUI  &kp K_CONTEXT_MENU  &kp LG(ESCAPE)   &kp LG(L)        &kp LC(LA(DEL))  &rgb_ug RGB_HUD
&none            &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &none               &kp LG(ESCAPE)   &kp LG(L)       &kp LC(LA(DEL))  &none   &none  &none  &rgb_ug RGB_SPI  &rgb_ug RGB_TOG     &kp PRINTSCREEN  &kp SCROLLLOCK   &kp PAUSE_BREAK  &rgb_ug RGB_SPD
&none            &none            &none            &none            &none                                &kp PRINTSCREEN  &kp SCROLLLOCK  &kp PAUSE_BREAK  &tog 5  &none  &none                   &rgb_ug RGB_EFF     &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_SPD  &none
            >;
        };

        function_layer {
            bindings = <
&none       &none           &none         &none             &none                                                                                                                        &none                     &none                 &none                 &none                     &none
&kp ESCAPE  &kp ENTER       &kp SPACE     &kp TAB           &kp DELETE      &kp INSERT                                                                           &kp C_AL_MOVIE_BROWSER  &none                     &none                 &none                 &kp C_STOP                &kp C_EJECT
&none       &sk LEFT_SHIFT  &redo         &undo             &kp BACKSPACE   &none                                                                                &kp C_RW                &kp F7                    &kp F8                &kp F9                &kp F10                   &kp F13
&caps_word  &kp LEFT_WIN    &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none                                                                                &kp K_CALCULATOR        &kp F4                    &kp F5                &kp F6                &kp F11                   &kp F14
&none       &kp LC(A)       &select_line  &select_word      &none           &none       &none  &none  &none   &kp C_PREV  &kp C_NEXT         &play_next_prev_td  &kp C_AL_FILE_BROWSER   &kp F1                    &kp F2                &kp F3                &kp F12                   &kp F15
&none       &none           &extend_line  &extend_word      &none                       &none  &none  &tog 6  &kp K_MUTE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP                             &kp C_BRIGHTNESS_MAXIMUM  &kp C_BRIGHTNESS_INC  &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_MINIMUM  &kp C_BRIGHTNESS_AUTO
            >;
        };

        gaming_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1         &kp F2    &kp F3     &kp F4     &kp F5                                                                                                                               &kp F6        &kp F7     &kp F8    &kp F9        &kp F10
&kp EQUAL      &kp N1    &kp N2     &kp N3     &kp N4   &kp N5                                                                                                              &kp N6  &kp N7        &kp N8     &kp N9    &kp N0        &kp MINUS
&kp TAB        &kp Q     &kp W      &kp E      &kp R    &kp T                                                                                                               &kp Y   &kp U         &kp I      &kp O     &kp P         &kp BSLH
&caps_word_tp  &kp A     &kp S      &kp D      &kp F    &kp G                                                                                                               &kp H   &kp J         &kp K      &kp L     &kp SEMI      &kp SQT
&kp GRAVE      &kp Z     &kp X      &kp C      &kp V    &kp B   &kp ESC   &kp LS(LA(LCTRL))  &kp LS(LG(LA(LCTRL)))  &kp LS(LG(LA(RCTRL)))  &kp LS(LA(RCTRL))  &kp RET       &kp N   &kp M         &kp COMMA  &kp DOT   &kp FSLH      &kp RSHFT
&magic 1 0     &kp HOME  &kp PG_UP  &kp PG_DN  &kp END          &kp BSPC  &kp DEL            &kp LSHFT              &kp LSHFT              &kp TAB            &lt 10 SPACE          &kp LS(LPAR)  &kp LBKT   &kp RBKT  &kp LS(RPAR)  &magic 1 0
            >;
        };

        typing_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1         &kp F2    &kp F3     &kp F4     &kp F5                                                                                                                               &kp F6        &kp F7     &kp F8    &kp F9        &kp F10
&kp EQUAL      &kp N1    &kp N2     &kp N3     &kp N4   &kp N5                                                                                                              &kp N6  &kp N7        &kp N8     &kp N9    &kp N0        &kp MINUS
&kp TAB        &kp Q     &kp W      &kp E      &kp R    &kp T                                                                                                               &kp Y   &kp U         &kp I      &kp O     &kp P         &kp BSLH
&caps_word_tp  &kp A     &kp S      &kp D      &kp F    &kp G                                                                                                               &kp H   &kp J         &kp K      &kp L     &kp SEMI      &kp SQT
&kp GRAVE      &kp Z     &kp X      &kp C      &kp V    &kp B   &kp ESC   &kp LS(LA(LCTRL))  &kp LS(LG(LA(LCTRL)))  &kp LS(LG(LA(RCTRL)))  &kp LS(LA(RCTRL))  &kp RET       &kp N   &kp M         &kp COMMA  &kp DOT   &kp FSLH      &kp RSHFT
&magic 1 0     &kp HOME  &kp PG_UP  &kp PG_DN  &kp END          &kp BSPC  &kp DEL            &kp LSHFT              &kp LSHFT              &kp TAB            &lt 10 SPACE          &kp LS(LPAR)  &kp LBKT   &kp RBKT  &kp LS(RPAR)  &magic 1 0
            >;
        };

        lower_layer {
            bindings = <
&kp C_BRI_DN  &kp C_BRI_UP  &kp C_PREV  &kp C_NEXT  &kp C_PP                                                                                                                          &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none            &kp PAUSE_BREAK
&none         &none         &none       &none       &none      &kp HOME                                                                                                    &kp LPAR   &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp PSCRN
&none         &none         &none       &kp UP      &none      &kp END                                                                                                     &kp RPAR   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp SLCK
&none         &none         &kp LEFT    &kp DOWN    &kp RIGHT  &kp PG_UP                                                                                                   &kp PRCNT  &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &none
&none         &kp K_CMENU   &none       &kp F11     &kp F12    &kp PG_DN  &tog 6  &none    &none                        &none                              &none  &tog 5   &kp COMMA  &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &none
&magic 1 0    &kp CAPS      &kp INS     &kp F11     &kp F12               &tog 3  &tog 11  &sticky_lower_layer 9 LSHFT  &sticky_lower_layer 9 RIGHT_SHIFT  &none  &tog 10             &kp KP_N0   &kp KP_N0     &kp KP_DOT     &kp KP_ENTER     &magic 1 0
            >;
        };

        factory_test_layer {
            bindings = <
&kp N0  &kp N6  &kp N2  &kp N8  &kp N4                                                                  &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                  &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                  &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                  &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6  &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9  &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        number_layer {
            bindings = <
&none           &none         &none         &none             &none                                                                                        &none     &none      &none     &none      &none
&kp ESC         &kp RET       &kp SPACE     &kp TAB           &kp DEL         &kp INSERT                                                        &kp CARET  &kp DLLR  &kp POUND  &kp AT    &kp EXCL   &kp PIPE
&none           &kp LSHFT     &kp LC(Y)     &kp LC(U)         &kp BSPC        &kp A                                                             &kp PRCNT  &kp N7    &kp N8     &kp N9    &kp COLON  &kp K
&kp KP_NUMLOCK  &kp LEFT_WIN  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &kp B                                                             &kp PLUS   &kp N4    &kp N5     &kp N6    &kp MINUS  &kp J
&none           &kp LC(A)     &select_line  &select_word      &kp UNDER       &kp C       &kp D  &kp E  &kp F    &kp LT     &kp GT   &kp EQUAL  &kp STAR   &kp N1    &kp N2     &kp N3    &kp RPAR   &kp G
&none           &none         &extend_line  &extend_word      &kp X                       &none  &none  &tog 11  &kp COMMA  &kp DOT  &kp N0                &kp LPAR  &kp LBKT   &kp RBKT  &kp RPAR   &kp TILDE
            >;
        };
    };
};
